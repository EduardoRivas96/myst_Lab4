# -- Borrar todos los elementos del environment
rm(list=ls())
mdir <- getwd()

# -- Establecer el sistema de medicion de la computadora
Sys.setlocale(category = "LC_ALL", locale = "")

# -- Huso horario
Sys.setenv(tz="America/Monterrey", TZ="America/Monterrey")
options(tz="America/Monterrey", TZ="America/Monterrey")

### Cargas librerias a utilizar

suppressMessages(library(plotly)) # Graficas interactivas

suppressMessages(library(Quandl)) # Descargar Precios

suppressMessages(library(PortfolioAnalytics)) # Teoría Moderna de Portafolios

suppressMessages(library(ROI)) # Optimizacion para portafolio

suppressMessages(library(knitr))  # Opciones de documentaci?n + c?digo

suppressMessages(library(kableExtra)) # Tablas en HTML

options(knitr.table.format = "html") 

Historicos<-read_excel("C:/Users/lalor/Desktop/Otoño 2018/TRADING/BienesDuraderos.xlsx")
Historicos$DateTime <-as.character(Historicos$DateTime)

# -- Cargar y/o instalar en automatico paquetes a utilizar -- #

pkg <- c("base","downloader","dplyr","fBasics","forecast","grid",
         "gridExtra","httr","jsonlite","lmtest","lubridate","moments",
         "matrixStats", "PerformanceAnalytics","plyr","quantmod",
         "reshape2","RCurl", "stats","scales","tseries",
         "TTR","TSA","XML","xts","zoo")

inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0) install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)

# -- Cargar archivos desde GitHub -- #

RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)

# -- Parametros para usar API-OANDA

# Tipo de cuenta practice/live
OA_At <- "practice"
# ID de cuenta
OA_Ai <- 1742531
# Token para llamadas a API
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6" 
# Hora a la que se considera "Fin del dia"
OA_Da <- 16
# Uso horario
OA_Ta <- "GMT"
# Instrumento
OA_In <- "USD_MXN"
# Granularidad o periodicidad de los precios H4 = Cada 4 horas
# S5, S10, S30, M1, M5, M15, M30, H1, H4, H8, D, M
OA_Pr <- "M1"

# Multiplicador de precios para convertir a PIPS
MultPip_MT1 <- 10000

Historicos<- data.frame("Date" = Historicos$DateTime,
                        "Actual" = Historicos$Actual,
                        "Consensus"= Historicos$Consensus,
                        "Previous" = Historicos$Previous,
                        "Clasificacion" = NA )

#For con los escenarios A, B, C y D

for(j in 1:row_number(Historicos)){#for rows
  
  if (Historicos$Actual[j]>=Historicos$Consensus[j]&Historicos$Consensus[j]>=Historicos$Previous[j]) {
    Historicos$Clasificacion[j] <-"A"
  }#if A"
  else if (Historicos$Actual[j]>=Historicos$Consensus[j]&Historicos$Consensus[j]<Historicos$Previous[j]){
    Historicos$Clasificacion[j] <-"B"
  }#if b
  else if (Historicos$Actual[j]<Historicos$Consensus[j]&Historicos$Consensus[j]>=Historicos$Previous[j]){
    Historicos$Clasificacion[j] <-"C"
  }# c
  else {Historicos$Clasificacion[j] <-"D"}
  
  
}# fin 



#Codigo para pedir los precios a OAnda fecha año-mes-dia
Calculos <-Historicos$DateTime <- as.character(as.POSIXct.Date(Historicos$DateTime,format = "%m/%d/%Y %H:%M")) # conviert todas las fechas a fromato Oanda

for ( i in 1:38){ 
  
  fecha_ejm <- Historicos$DateTime[[i]]
  aux <- Historicos$Clasificacion[[i]]
  
  
  #opcion convertir fecha
  
  F2 <- as.Date(substr(fecha_ejm,1,10))
  
  
  if(wday(F2) != 1) # if para saber en que dia se encuentra
    #wday 
    #si da 1, domingo no se obtienen precios 
  {
    
    T1 <- F2
    T2 <- F2+1
    Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
                               DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
                               Instrument = OA_In, 
                               Start = T1, End = T2, Count = NULL)
  } else {
    
    T1 <- F2-2
    T2 <- F2+1
    Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
                               DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
                               Instrument = OA_In, 
                               Start = T1, End = T2, Count = NULL)
  }
  
  Precios_Oanda$TimeStamp <- as.character(as.POSIXct(Precios_Oanda$TimeStamp,format = "%m/%d/%Y %H:%M:%S"))
  
  ind <- which(Precios_Oanda$TimeStamp == Historicos$Date[[i]])
  
  rend[1] <- 0
  rend[i+1]<-Precios_Oanda$Close[i+1]/Precios_Oanda$Close[i]-1
  
  data[[i]] <- list("Escenario" = Historicos$Clasificacion[i],"Precios" = Precios_Oanda[(ind-15):(ind+15),])

}


#Código para obtener el precio 15 antes y 15 despues del deseado tienen que ser 31
df <- Precios_Oanda[(ind-15):(ind+15),]
window_prices[[i]]<-df
metrics$Metric.1[[i]]<-sd(diff(log(window_prices[[i]]$Close))*MultPip_MT1)
metrics$Metric.2[[i]]<-window_prices[[i]]$Close[[15]]-window_prices[[i]]$Close[[31]]
metrics$Metric.3[[i]]<-(min(window_prices[[i]]$Low)-max(window_prices[[i]]$High))*MultPip_MT1
}

data=data.frame(append(data,metrics))


#Para obtener la consistencia de los resultados

results=data.frame("case"=sort(unique(data$Class)),"resultP"=0,"resultN"=0)
results$resultP[[4]]<-count(data$Class==4&data$Metric.2>0)[[2]][2]/count(data$Class==4)[[2]][2]
results$resultP[[3]]<-count(data$Class==3&data$Metric.2>0)[[2]][2]/count(data$Class==3)[[2]][2]
results$resultP[[2]]<-count(data$Class==2&data$Metric.2>0)[[2]][2]/count(data$Class==2)[[2]][2]
results$resultP[[1]]<-count(data$Class==1&data$Metric.2>0)[[2]][2]/count(data$Class==1)[[2]][2]
results$resultN= 1-results$resultP
